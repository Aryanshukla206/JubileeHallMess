// src/functions.ts
import { jwtDecode } from "jwt-decode";

// src/types.ts
var CredentialTypes = class {
  static email_otp(email, otp) {
    return { email, otp, type: "email_otp" };
  }
  static email_password(email, password) {
    return { type: "email_pass", email, password };
  }
  static jwt(userToken) {
    return { token: userToken, type: "jwt" };
  }
  static google(clientId) {
    return new Promise((resolve, reject) => {
      const tokenClient = google.accounts.oauth2.initTokenClient({
        client_id: clientId,
        scope: "openid profile email",
        // Modify scopes as needed
        prompt: "select_account",
        // Ensures the account selection popup
        callback: (response) => {
          console.log("scope modified");
          if (response && response.access_token) {
            resolve({ token: response.access_token, type: "google" });
          } else {
            reject("Error: Google sign-in failed.");
          }
        }
      });
      tokenClient.requestAccessToken();
    });
  }
  static anonymous() {
    return { type: "anonymous" };
  }
  static refreshCredential(id, token) {
    return { id, type: "refreshaccessToken", token };
  }
  static initGoogleSignin(clientId) {
    window.location.href = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${clientId}&redirect_uri=${window.location.href.slice(0, -1)}&response_type=code&scope=email profile`;
  }
};

// src/functions.ts
function loadGoogleScript() {
  return new Promise((resolve, reject) => {
    if (typeof document !== "undefined") {
      if (document.getElementById("google-api-script")) {
        resolve();
        return;
      }
      const script = document.createElement("script");
      script.id = "google-api-script";
      script.src = "https://accounts.google.com/gsi/client";
      script.async = true;
      script.defer = true;
      script.onload = () => resolve();
      script.onerror = () => reject(new Error("Failed to load the Google API script"));
      document.body.appendChild(script);
    }
  });
}
function rembaseInitSelfHost(appId, selfHostUrl) {
  var baseURL = selfHostUrl;
  let accessToken = void 0;
  if (typeof window !== "undefined") {
    var gotBaseUrl = window.sessionStorage.getItem("i_done");
    if (!gotBaseUrl) {
      let response = fetch(`https://rembase.revtrance.com/api/init/${appId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({})
      });
      response.then((jsonResp) => {
        jsonResp.json().then((value2) => {
          if (value2.success) {
            window.sessionStorage.setItem("i_done", value2.baseUrl);
          }
        });
      });
    }
    accessToken = localStorage.getItem(`rembase_utk_atk`) || void 0;
  }
  var value = {
    login: async (credential) => {
      let loginUrl = `${baseURL}/login`;
      let auth = await fetch(loginUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify(credential)
      });
      let result = await auth.json();
      if (result.success) {
        if (typeof window !== "undefined") {
          localStorage.setItem(`rembase_utk_atk`, result.accessToken);
          console.log("logging in");
          document.cookie = createCookieForDays(result.duration || "30d", "rembase_utk_atk", result.accessToken);
        }
        let user = jwtDecode(result.accessToken);
        return user;
      } else {
        throw new Error(result.error);
      }
    },
    loginToServer: async (credential, api) => {
      let loginUrl = `${baseURL}`;
      fetch(api, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({ credential, loginUrl })
      });
    },
    registerUser: async (email, password) => {
      let baseUrl;
      if (typeof window !== "undefined") {
        baseUrl = window.sessionStorage.getItem("base-url");
      }
      let response = await fetch(`${baseUrl}/login/register`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({ email, password })
      });
      let confirmation = await response.json();
      if (!confirmation.success) {
        throw new Error(confirmation.error);
      }
      return confirmation;
    },
    // send_phone_otp : async (contact:string) : Promise<any> =>{
    //     let response = await fetch(`${baseURL}/login/phone_otp`,{
    //         method: "POST",
    //         headers: {
    //             "Content-Type":"application/json"
    //         },
    //         body: JSON.stringify({contact})
    //     })
    //     let jsonResp = await response.json()
    //     return jsonResp
    // },
    send_email_otp: async (email) => {
      let response = await fetch(`${baseURL}/login/email_otp`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({ email })
      });
      let jsonResp = await response.json();
      if (!jsonResp.success) {
        throw jsonResp.error;
      }
      return jsonResp;
    },
    resetPassword: async (token, password) => {
      let response = await fetch(`${baseURL}/login/reset-password`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({ token, password })
      });
      let jsonResp = await response.json();
      if (!jsonResp.success) {
        throw jsonResp.error;
      }
      return jsonResp;
    },
    resetPasswordInstantly: async (oldPassword, newPassword) => {
      let response = await fetch(`${baseURL}/login/reset-password`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `bearer ${accessToken}`,
          "ro": "20136"
        },
        body: JSON.stringify({ oldPassword, newPassword })
      });
      let jsonResp = await response.json();
      if (!jsonResp.success) {
        throw jsonResp.error;
      }
      return jsonResp;
    },
    sendPasswordResetEmail: async (email) => {
      let response = await fetch(`${baseURL}/login/reset-password`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({ email })
      });
      let jsonResp = await response.json();
      if (!jsonResp.success) {
        throw jsonResp.error;
      }
      return jsonResp;
    },
    resendVerificationEmail: async (email) => {
      let response = await fetch(`${baseURL}/register`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({ email })
      });
      let jsonResp = await response.json();
      if (!jsonResp.success) {
        throw jsonResp.error;
      }
      return jsonResp;
    },
    currentUser: {}
  };
  if (accessToken) {
    let user = jwtDecode(accessToken);
    value.currentUser = user;
    value.currentUser.logout = (redirectPath) => {
      if (typeof window !== "undefined") {
        window.localStorage.removeItem(`rembase_utk_atk`);
        document.cookie = `rembase_utk_atk=sdfsfd; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        if (redirectPath) {
          window.location.href = redirectPath;
        }
      } else {
        console.error("Window is not defined");
      }
    };
    value.currentUser.callFunction = async (functionName, ...arg) => {
      console.log("making request to....", `${baseURL}/functions`);
      let rsp = await fetch(`${baseURL}/functions`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${accessToken}`,
          "ro": "20136"
        },
        body: JSON.stringify({ arg, functionName })
      });
      let data = await rsp.json();
      if (data.success) {
        return data.result;
      } else {
        throw data.error;
      }
    };
    value.currentUser.refreshAccessToken = async () => {
      let id2 = value?.currentUser?.id;
      let user2 = await value.login(
        CredentialTypes.refreshCredential(id2 || "", accessToken)
      );
      value.currentUser = user2;
      return user2;
    };
  }
  return value;
}
function fetchBaseUrl(appId) {
  return new Promise((resolve, reject) => {
    fetch(`https://rembase.revtrance.com/api/init/${appId}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "ro": "20136"
      },
      body: JSON.stringify({})
    }).then((response) => response.json()).then((data) => {
      const updatedValue = data;
      resolve(updatedValue.baseUrl);
    }).catch((error) => {
      console.error("Error fetching data:", error);
      reject(error);
    });
  });
}
function rembaseInitSync(appId, projectId, regionCode) {
  var baseURL = `https://${regionCode}.rembase.revtrance.com/api/${projectId}/${appId}`;
  let accessToken = void 0;
  if (typeof window !== "undefined") {
    var baseUrlSaved = window.sessionStorage.getItem("base-url");
    window.sessionStorage.setItem("base-url", baseURL);
    if (!baseUrlSaved) {
      fetchBaseUrl(appId).then((resp) => {
        window.sessionStorage.setItem("base-url", resp);
      });
    }
    accessToken = window.localStorage.getItem(`rembase_utk_atk`) || void 0;
  }
  var value = {
    login: async (credential) => {
      let loginUrl = `${baseURL}/login`;
      let auth = await fetch(loginUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify(credential)
      });
      let result = await auth.json();
      if (result.success) {
        if (typeof window !== "undefined") {
          localStorage.setItem(`rembase_utk_atk`, result.accessToken);
          document.cookie = createCookieForDays(result.duration || "30d", "rembase_utk_atk", result.accessToken);
        }
        let user = jwtDecode(result.accessToken);
        return user;
      } else {
        throw new Error(result.error);
      }
    },
    loginToServer: async (credential, api) => {
      let loginUrl = `${baseURL}`;
      fetch(api, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({ credential, loginUrl })
      });
    },
    registerUser: async (email, password) => {
      let baseUrl;
      if (typeof window !== "undefined") {
        baseUrl = window.sessionStorage.getItem("base-url");
      }
      let response = await fetch(`${baseUrl}/login/register`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({ email, password })
      });
      let confirmation = await response.json();
      if (!confirmation.success) {
        throw new Error(confirmation.error);
      }
      return confirmation;
    },
    // send_phone_otp : async (contact:string) : Promise<any> =>{
    //     let response = await fetch(`${baseURL}/login/phone_otp`,{
    //         method: "POST",
    //         headers: {
    //             "Content-Type":"application/json"
    //         },
    //         body: JSON.stringify({contact})
    //     })
    //     let jsonResp = await response.json()
    //     return jsonResp
    // },
    send_email_otp: async (email) => {
      let response = await fetch(`${baseURL}/login/email_otp`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({ email })
      });
      let jsonResp = await response.json();
      if (!jsonResp.success) {
        throw jsonResp.error;
      }
      return jsonResp;
    },
    resetPassword: async (token, password) => {
      let response = await fetch(`${baseURL}/login/reset-password`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({ token, password })
      });
      let jsonResp = await response.json();
      if (!jsonResp.success) {
        throw jsonResp.error;
      }
      return jsonResp;
    },
    resetPasswordInstantly: async (oldPassword, newPassword) => {
      let response = await fetch(`${baseURL}/login/reset-password`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `bearer ${accessToken}`,
          "ro": "20136"
        },
        body: JSON.stringify({ oldPassword, newPassword })
      });
      let jsonResp = await response.json();
      if (!jsonResp.success) {
        throw jsonResp.error;
      }
      return jsonResp;
    },
    sendPasswordResetEmail: async (email) => {
      let response = await fetch(`${baseURL}/login/reset-password`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({ email })
      });
      let jsonResp = await response.json();
      if (!jsonResp.success) {
        throw jsonResp.error;
      }
      return jsonResp;
    },
    resendVerificationEmail: async (email) => {
      let response = await fetch(`${baseURL}/register`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          "ro": "20136"
        },
        body: JSON.stringify({ email })
      });
      let jsonResp = await response.json();
      if (!jsonResp.success) {
        throw jsonResp.error;
      }
      return jsonResp;
    },
    currentUser: {}
  };
  if (accessToken) {
    let user = jwtDecode(accessToken);
    value.currentUser = user;
    value.currentUser.logout = (redirectPath) => {
      if (typeof window !== "undefined") {
        window.localStorage.removeItem(`rembase_utk_atk`);
        document.cookie = `rembase_utk_atk=l; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        if (redirectPath) {
          window.location.href = redirectPath;
        }
      } else {
        console.error("Window is not defined");
      }
    };
    value.currentUser.callFunction = async (functionName, ...arg) => {
      let rsp = await fetch(`${baseURL}/functions`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${accessToken}`,
          "ro": "20136"
        },
        body: JSON.stringify({ arg, functionName })
      });
      let data = await rsp.json();
      if (data.success) {
        return data.result;
      } else {
        throw data.error;
      }
    };
    value.currentUser.refreshAccessToken = async () => {
      let id2 = value?.currentUser?.id;
      let user2 = await value.login(
        CredentialTypes.refreshCredential(id2 || "", accessToken)
      );
      value.currentUser = user2;
      return user2;
    };
  }
  return value;
}
function createCookieForDays(duration, cookieName, cookieValue) {
  const value = parseInt(duration.replace("d", ""), 10);
  if (isNaN(value)) {
    throw new Error("Invalid duration value. Format must be 'Xd' (e.g., '30d').");
  }
  const date = /* @__PURE__ */ new Date();
  date.setDate(date.getDate() + value);
  console.log(`${cookieName}=${cookieValue}; Expires=${date.toUTCString()}; Path=/`);
  return `${cookieName}=${cookieValue}; Expires=${date.toUTCString()}; Path=/ ; Secure;`;
}
export {
  CredentialTypes,
  loadGoogleScript,
  rembaseInitSelfHost,
  rembaseInitSync
};
