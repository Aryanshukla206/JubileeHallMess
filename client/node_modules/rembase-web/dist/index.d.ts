type RembaseCredential = {
    type: string;
    token: string | undefined | null;
    username: string | undefined;
    email: string | undefined;
    password: string | undefined;
    contact: string | undefined;
    otp: string | undefined;
    id: string | undefined;
    platform: "web" | undefined;
    redirect_uri: string | undefined;
};
type RembaseUser = {
    id: string | undefined;
    email: string | undefined;
    customData: JSON | undefined;
    data: JSON | undefined;
    accessToken: string | undefined;
    lastLogin: Date | undefined;
    callFunction: (functionName: string, ...args: any[]) => Promise<JSON>;
    refreshAccessToken: () => Promise<RembaseUser>;
    logout: (path: string | undefined) => void;
};
declare class CredentialTypes {
    static email_otp(email: string, otp: string): RembaseCredential;
    static email_password(email: string, password: string): RembaseCredential;
    static jwt(userToken: string): RembaseCredential;
    static google(clientId: string): Promise<RembaseCredential>;
    static anonymous(): RembaseCredential;
    static refreshCredential(id: string, token: string): RembaseCredential;
    static initGoogleSignin(clientId: string): void;
}
type RembaseServerUser = {
    accessToken: string;
};
type RembaseApp = {
    currentUser: RembaseUser | undefined | null;
    login: (credential: RembaseCredential) => Promise<RembaseUser>;
    send_email_otp: (email: string) => Promise<void>;
    registerUser: (email: string, password: string) => Promise<JSON>;
    resendVerificationEmail: (email: string) => Promise<JSON>;
    sendPasswordResetEmail: (email: string) => Promise<JSON>;
    resetPassword: (token: string, password: string) => Promise<JSON>;
    resetPasswordInstantly: (oldPassword: string, newPassword: string) => Promise<JSON>;
};

declare function loadGoogleScript(): Promise<void>;
declare function rembaseInitSelfHost(appId: string, selfHostUrl: string): {
    login: (credential: CredentialTypes) => Promise<RembaseUser>;
    loginToServer: (credential: CredentialTypes, api: string) => Promise<void>;
    registerUser: (email: string, password: string) => Promise<any>;
    send_email_otp: (email: string) => Promise<any>;
    resetPassword: (token: string, password: string) => Promise<any>;
    resetPasswordInstantly: (oldPassword: string, newPassword: string) => Promise<any>;
    sendPasswordResetEmail: (email: string) => Promise<any>;
    resendVerificationEmail: (email: string) => Promise<any>;
    currentUser: RembaseUser;
};
declare function rembaseInitSync(appId: string, projectId: string, regionCode: string): RembaseApp;

export { CredentialTypes, type RembaseApp, type RembaseCredential, type RembaseServerUser, type RembaseUser, loadGoogleScript, rembaseInitSelfHost, rembaseInitSync };
